# bot.py  ‚Äî aiogram 3.x
import os
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, KeyboardButton, ReplyKeyboardMarkup,
    ReplyKeyboardRemove, ReplyKeyboardBuilder, InputMediaPhoto
)

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# -----------------------------------------------------------------------------
API_TOKEN = os.getenv("TOKEN")
if not API_TOKEN:
    raise RuntimeError("TOKEN env-var is required!")

logging.basicConfig(level=logging.INFO, format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s")
bot: Bot = Bot(API_TOKEN, parse_mode="HTML")
dp: Dispatcher = Dispatcher()

# -----------------------------------------------------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# -----------------------------------------------------------------------------
def kb(*labels: str, width: int = 2) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –Ω–∞–¥–ø–∏—Å–µ–π (width-–∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ)."""
    builder = ReplyKeyboardBuilder()
    for text in labels:
        builder.add(KeyboardButton(text=text))
    builder.adjust(width)
    return builder.as_markup(resize_keyboard=True)

# -----------------------------------------------------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# -----------------------------------------------------------------------------
MAIN_KB = kb("ü•É –í–∏—Å–∫–∏", "üßä –í–æ–¥–∫–∞", "üç∫ –ü–∏–≤–æ", "üç∑ –í–∏–Ω–æ",
             "üìã –¢–µ—Å—Ç—ã", "üçπ –ö–æ–∫—Ç–µ–π–ª–∏", "ü¶å –Ø–≥–µ—Ä–º–µ–π—Å—Ç–µ—Ä")

main_router = Router()

@main_router.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=MAIN_KB)

# -----------------------------------------------------------------------------
# --- –ü–†–ò–ú–ï–† –†–ê–ó–î–ï–õ–ê ¬´–í–∏—Å–∫–∏¬ª ---------------------------------------------------
# -----------------------------------------------------------------------------
WHISKY_KB = kb(
    "Monkey Shoulder", "Glenfiddich 12 Years", "Fire & Cane",
    "IPA Experiment", "Grant's Classic", "Grant's Summer Orange",
    "Grant's Winter Dessert", "Grant's Tropical Fiesta",
    "Tullamore D.E.W.", "Tullamore D.E.W. Honey", "–ù–∞–∑–∞–¥",
    width=2
)

whisky_router = Router()

@whisky_router.message(F.text == "ü•É –í–∏—Å–∫–∏")
async def whisky_menu(m: Message):
    await m.answer("ü•É –í—ã–±–µ—Ä–∏ –±—Ä–µ–Ω–¥ –≤–∏—Å–∫–∏:", reply_markup=WHISKY_KB)

@whisky_router.message(F.text == "–ù–∞–∑–∞–¥")
async def whisky_back(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_KB)

# ---- –û–î–ò–ù –±—Ä–µ–Ω–¥ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä ---------------------------------------------------
@whisky_router.message(F.text == "Monkey Shoulder")
async def monkey_shoulder(m: Message):
    await m.answer_photo(
        photo="https://upload.wikimedia.org/wikipedia/commons/8/8d/Monkey_Shoulder_scotch_bottle.jpg",
        caption=(
            "<b>Monkey Shoulder</b>\n"
            "‚Ä¢ –ö—É–ø–∞–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–æ—Ç–ª–∞–Ω–¥—Å–∫–∏–π –≤–∏—Å–∫–∏ (Glenfiddich + Balvenie + Kininvie)\n"
            "‚Ä¢ –ê—Ä–æ–º–∞—Ç: –≤–∞–Ω–∏–ª—å, –º—ë–¥, —Ü–∏—Ç—Ä—É—Å\n"
            "‚Ä¢ –í–∫—É—Å: –∫–∞—Ä–∞–º–µ–ª—å, —Ç—ë–ø–ª—ã–µ —Å–ø–µ—Ü–∏–∏, —Ç–æ—Å—Ç–æ–≤—ã–π —Ö–ª–µ–±\n"
            "‚Ä¢ –ö—Ä–µ–ø–æ—Å—Ç—å 40 %\n"
            "‚Ä¢ –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è Old Fashioned –∏ Whisky Sour\n"
            "‚Ä¢ –ë—Ä–æ–Ω–∑–æ–≤—ã–µ ¬´–ø–ª–µ—á–∏¬ª –Ω–∞ –±—É—Ç—ã–ª–∫–µ ‚Äî —Å–∏–º–≤–æ–ª —Ç—Ä–æ–π–Ω–æ–≥–æ —Å–æ–ª–æ–¥–∞"
        )
    )

# -----------------  –î–û–ë–ê–í–õ–Ø–¢–¨ –°–Æ–î–ê –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã --------------------------
# @whisky_router.message(F.text == "Glenfiddich 12 Years")
# async def glen12(m: Message):
#     await m.answer_photo(...)

# -----------------------------------------------------------------------------
# –¢–ï–°–¢–´ (–æ–±—Ä–∞–∑–µ—Ü: —Ç–æ–ª—å–∫–æ J√§germeister, –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å)
# -----------------------------------------------------------------------------
tests_router = Router()
TESTS_MENU_KB = kb("üß™ –¢–µ—Å—Ç –ø–æ J√§germeister", "–ù–∞–∑–∞–¥")

QUESTIONS = {
    "jager": {
        1: ("–°–∫–æ–ª—å–∫–æ —Ç—Ä–∞–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ J√§germeister?", ["56", "27", "12", "ü§´ –°–µ–∫—Ä–µ—Ç"], "56"),
    }
}
USER_STATE: dict[int, dict] = {}

@tests_router.message(F.text == "üìã –¢–µ—Å—Ç—ã")
async def tests_menu(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", reply_markup=TESTS_MENU_KB)

@tests_router.message(F.text == "üß™ –¢–µ—Å—Ç –ø–æ J√§germeister")
async def start_jager(m: Message):
    USER_STATE[m.from_user.id] = {"name": "jager", "step": 1, "score": 0}
    await ask(m)

@tests_router.message(F.text == "–ù–∞–∑–∞–¥")
async def tests_back(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_KB)

async def ask(m: Message):
    st = USER_STATE[m.from_user.id]
    qset = QUESTIONS[st["name"]]
    step = st["step"]
    if step > len(qset):
        await m.answer(f"–ì–æ—Ç–æ–≤–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st['score']}/{len(qset)}",
                       reply_markup=ReplyKeyboardRemove())
        USER_STATE.pop(m.from_user.id, None)
        return
    q, variants, correct = qset[step]
    st["correct"] = correct
    await m.answer(f"–í–æ–ø—Ä–æ—Å {step}: {q}", reply_markup=kb(*variants, width=1))

@tests_router.message(lambda m: m.from_user.id in USER_STATE)
async def test_answer(m: Message):
    st = USER_STATE[m.from_user.id]
    if m.text == st["correct"]:
        st["score"] += 1
        await m.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await m.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {st['correct']}")
    st["step"] += 1
    await ask(m)

# -----------------------------------------------------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫
# -----------------------------------------------------------------------------
dp.include_routers(main_router, whisky_router, tests_router)

if __name__ == "__main__":
    import asyncio
    async def main():
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    asyncio.run(main())
